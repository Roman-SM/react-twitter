{"ast":null,"code":"var _jsxFileName = \"/Users/roma/Documents/\\u041D\\u0430\\u0432\\u0447\\u0430\\u043D\\u043D\\u044F_JS/Front-End/\\u041C\\u043E\\u0434\\u0443\\u043B\\u044C 2. \\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430 Front-end/\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430/fullstack-1/front/src/container/post-list/index.js\",\n  _s = $RefreshSig$();\nimport { useState, Fragment, useEffect, useReducer } from \"react\";\nimport Title from \"../../component/title\";\nimport Grid from \"../../component/grid\";\nimport Box from \"../../component/box\";\nimport PostCreate from \"../post-create\";\nimport PostItem from \"../post-item\";\nimport { Alert, Skeleton, LOAD_STATUS } from \"../../component/load\";\nimport { getDate } from \"../../util/getDate\";\nimport { requestInitialState, requestReducer, REQUEST_ACTION_TYPE } from \"../../util/request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Container() {\n  _s();\n  const [state, dispatch] = useReducer(requestReducer, requestInitialState);\n  const getData = async () => {\n    dispatch({\n      type: REQUEST_ACTION_TYPE.PROGRESS\n    });\n    try {\n      // метод method: \"GET\" іде за замовчуванням і його можна не вказувати\n      const res = await fetch(\"http://localhost:4000/post-list\");\n      const data = await res.json();\n      if (res.ok) {\n        dispatch({\n          type: REQUEST_ACTION_TYPE.PROGRESS\n        });\n      } else {\n        dispatch({\n          type: REQUEST_ACTION_TYPE.PROGRESS\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: REQUEST_ACTION_TYPE.PROGRESS\n      });\n    }\n  };\n  const convertData = raw => ({\n    list: [...(raw.list || [])].reverse().map(({\n      id,\n      username,\n      text,\n      date\n    }) => ({\n      id,\n      username,\n      text,\n      date: getDate(date)\n    })),\n    isEmpty: raw.list.length === 0\n  });\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PostCreate, {\n          onCreate: getData,\n          placeholder: \"What is happening?!\",\n          button: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), status === LOAD_STATUS.PROGRESS && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), status === LOAD_STATUS.ERROR && /*#__PURE__*/_jsxDEV(Alert, {\n      status: status,\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), status === LOAD_STATUS.SUCCESS && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: data.isEmpty ? /*#__PURE__*/_jsxDEV(Alert, {\n        message: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u043E\\u0441\\u0442\\u0456\\u0432 \\u043F\\u0443\\u0441\\u0442\\u0438\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 28\n      }, this) : data.list.map(item => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: /*#__PURE__*/_jsxDEV(PostItem, {\n          ...item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Container, \"20F3ji597HRQCxRNkmufLQO97XU=\");\n_c = Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["useState","Fragment","useEffect","useReducer","Title","Grid","Box","PostCreate","PostItem","Alert","Skeleton","LOAD_STATUS","getDate","requestInitialState","requestReducer","REQUEST_ACTION_TYPE","jsxDEV","_jsxDEV","Container","_s","state","dispatch","getData","type","PROGRESS","res","fetch","data","json","ok","error","convertData","raw","list","reverse","map","id","username","text","date","isEmpty","length","children","fileName","_jsxFileName","lineNumber","columnNumber","onCreate","placeholder","button","status","ERROR","message","SUCCESS","item","_c","$RefreshReg$"],"sources":["/Users/roma/Documents/Навчання_JS/Front-End/Модуль 2. Практика Front-end/Практика/fullstack-1/front/src/container/post-list/index.js"],"sourcesContent":["import { useState, Fragment, useEffect, useReducer } from \"react\"\nimport Title from \"../../component/title\"\nimport Grid from \"../../component/grid\"\nimport Box from \"../../component/box\"\nimport PostCreate from \"../post-create\"\nimport PostItem from \"../post-item\"\nimport { Alert, Skeleton, LOAD_STATUS } from \"../../component/load\"\nimport { getDate } from \"../../util/getDate\"\nimport { requestInitialState, requestReducer, REQUEST_ACTION_TYPE } from \"../../util/request\"\n\n\nexport default function Container() {\n  const [state, dispatch] = useReducer(requestReducer, requestInitialState)\n  \n  const getData = async () => {\n    dispatch({type: REQUEST_ACTION_TYPE.PROGRESS})\n\n    try {\n      // метод method: \"GET\" іде за замовчуванням і його можна не вказувати\n      const res = await fetch(\"http://localhost:4000/post-list\")\n\n      const data = await res.json()\n\n      if(res.ok) {\n        dispatch({type: REQUEST_ACTION_TYPE.PROGRESS})\n\n      } else {\n        dispatch({type: REQUEST_ACTION_TYPE.PROGRESS})\n\n      }\n    } catch (error) {\n      dispatch({type: REQUEST_ACTION_TYPE.PROGRESS})\n\n    }\n  }\n  const convertData = (raw) => ({\n    list: [...raw.list || []].reverse().map(({id, username, text, date}) => ({\n      id,\n      username,\n      text,\n      date: getDate(date),\n    })),\n    isEmpty: raw.list.length === 0\n  })\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  return (\n    <Grid>\n      <Box>\n        <Grid>\n          <Title>Home</Title>\n          <PostCreate\n            onCreate={getData}\n            placeholder=\"What is happening?!\"\n            button=\"Post\"\n          />\n        </Grid>\n      </Box>\n      {status === LOAD_STATUS.PROGRESS && (\n        <Fragment>\n          <Box>\n            <Skeleton/>\n          </Box>\n          <Box>\n            <Skeleton/>\n          </Box>\n        </Fragment>\n      )}\n      {status === LOAD_STATUS.ERROR && (\n        <Alert status={status} message={message}/>\n      )}\n      {status === LOAD_STATUS.SUCCESS && (\n        <Fragment>\n          {data.isEmpty ? (<Alert message='Список постів пустий'/>) : (\n            data.list.map((item) => (\n              <Fragment key={item.id}>\n                <PostItem {...item}/>\n              </Fragment>\n            ))\n          )}\n        </Fragment>\n      )}\n    </Grid>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}