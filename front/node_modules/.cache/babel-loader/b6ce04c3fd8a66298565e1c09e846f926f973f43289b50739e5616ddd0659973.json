{"ast":null,"code":"var _jsxFileName = \"/Users/roma/Documents/\\u041D\\u0430\\u0432\\u0447\\u0430\\u043D\\u043D\\u044F_JS/Front-End/\\u041C\\u043E\\u0434\\u0443\\u043B\\u044C 2. \\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430 Front-end/\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430/fullstack-1/front/src/container/post-list/index.js\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useReducer } from \"react\";\nimport Title from \"../../component/title\";\nimport Grid from \"../../component/grid\";\nimport Box from \"../../component/box\";\nimport PostCreate from \"../post-create\";\nimport PostItem from \"../post-item\";\nimport { Alert, Skeleton } from \"../../component/load\";\nimport { getDate } from \"../../util/getDate\";\nimport { requestInitialState, requestReducer, REQUEST_ACTION_TYPE } from \"../../util/request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Container() {\n  _s();\n  const [state, dispatch] = useReducer(requestReducer, requestInitialState);\n  const getData = async () => {\n    dispatch({\n      type: REQUEST_ACTION_TYPE.PROGRESS\n    });\n    try {\n      // метод method: \"GET\" іде за замовчуванням і його можна не вказувати\n      const res = await fetch(\"http://localhost:4000/post-list\");\n      const data = await res.json();\n      if (res.ok) {\n        dispatch({\n          type: REQUEST_ACTION_TYPE.SUCCESS,\n          payload: convertData(data)\n        });\n      } else {\n        dispatch({\n          type: REQUEST_ACTION_TYPE.ERROR,\n          payload: data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: REQUEST_ACTION_TYPE.ERROR,\n        payload: error.message\n      });\n    }\n  };\n  const convertData = raw => ({\n    list: [...(raw.list || [])].reverse().map(({\n      id,\n      username,\n      text,\n      date\n    }) => ({\n      id,\n      username,\n      text,\n      date: getDate(date)\n    })),\n    isEmpty: raw.list.length === 0\n  });\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PostCreate, {\n          onCreate: getData,\n          placeholder: \"What is happening?!\",\n          button: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), state.status === REQUEST_ACTION_TYPE.PROGRESS && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), state.status === REQUEST_ACTION_TYPE.ERROR && /*#__PURE__*/_jsxDEV(Alert, {\n      status: state.status,\n      message: state.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), state.status === REQUEST_ACTION_TYPE.SUCCESS && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: state.data.isEmpty ? /*#__PURE__*/_jsxDEV(Alert, {\n        message: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u043E\\u0441\\u0442\\u0456\\u0432 \\u043F\\u0443\\u0441\\u0442\\u0438\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 34\n      }, this) : state.data.list.map(item => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: /*#__PURE__*/_jsxDEV(PostItem, {\n          ...item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Container, \"20F3ji597HRQCxRNkmufLQO97XU=\");\n_c = Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["Fragment","useEffect","useReducer","Title","Grid","Box","PostCreate","PostItem","Alert","Skeleton","getDate","requestInitialState","requestReducer","REQUEST_ACTION_TYPE","jsxDEV","_jsxDEV","Container","_s","state","dispatch","getData","type","PROGRESS","res","fetch","data","json","ok","SUCCESS","payload","convertData","ERROR","message","error","raw","list","reverse","map","id","username","text","date","isEmpty","length","children","fileName","_jsxFileName","lineNumber","columnNumber","onCreate","placeholder","button","status","item","_c","$RefreshReg$"],"sources":["/Users/roma/Documents/Навчання_JS/Front-End/Модуль 2. Практика Front-end/Практика/fullstack-1/front/src/container/post-list/index.js"],"sourcesContent":["import { Fragment, useEffect, useReducer } from \"react\"\nimport Title from \"../../component/title\"\nimport Grid from \"../../component/grid\"\nimport Box from \"../../component/box\"\nimport PostCreate from \"../post-create\"\nimport PostItem from \"../post-item\"\nimport { Alert, Skeleton } from \"../../component/load\"\nimport { getDate } from \"../../util/getDate\"\nimport { requestInitialState, requestReducer, REQUEST_ACTION_TYPE } from \"../../util/request\"\n\n\nexport default function Container() {\n  const [state, dispatch] = useReducer(requestReducer, requestInitialState)\n  \n  const getData = async () => {\n    dispatch({type: REQUEST_ACTION_TYPE.PROGRESS})\n\n    try {\n      // метод method: \"GET\" іде за замовчуванням і його можна не вказувати\n      const res = await fetch(\"http://localhost:4000/post-list\")\n\n      const data = await res.json()\n\n      if(res.ok) {\n        dispatch({type: REQUEST_ACTION_TYPE.SUCCESS, payload: convertData(data)})\n      } else {\n        dispatch({type: REQUEST_ACTION_TYPE.ERROR, payload: data.message})\n      }\n    } catch (error) {\n      dispatch({type: REQUEST_ACTION_TYPE.ERROR, payload: error.message})\n    }\n  }\n  const convertData = (raw) => ({\n    list: [...raw.list || []].reverse().map(({id, username, text, date}) => ({\n      id,\n      username,\n      text,\n      date: getDate(date),\n    })),\n    isEmpty: raw.list.length === 0\n  })\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  return (\n    <Grid>\n      <Box>\n        <Grid>\n          <Title>Home</Title>\n          <PostCreate\n            onCreate={getData}\n            placeholder=\"What is happening?!\"\n            button=\"Post\"\n          />\n        </Grid>\n      </Box>\n      {state.status === REQUEST_ACTION_TYPE.PROGRESS && (\n        <Fragment>\n          <Box>\n            <Skeleton/>\n          </Box>\n          <Box>\n            <Skeleton/>\n          </Box>\n        </Fragment>\n      )}\n      {state.status === REQUEST_ACTION_TYPE.ERROR && (\n        <Alert status={state.status} message={state.message}/>\n      )}\n      {state.status === REQUEST_ACTION_TYPE.SUCCESS && (\n        <Fragment>\n          {state.data.isEmpty ? (<Alert message='Список постів пустий'/>) : (\n            state.data.list.map((item) => (\n              <Fragment key={item.id}>\n                <PostItem {...item}/>\n              </Fragment>\n            ))\n          )}\n        </Fragment>\n      )}\n    </Grid>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}