{"ast":null,"code":"var _jsxFileName = \"/Users/roma/Documents/\\u041D\\u0430\\u0432\\u0447\\u0430\\u043D\\u043D\\u044F_JS/Front-End/\\u041C\\u043E\\u0434\\u0443\\u043B\\u044C 2. \\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430 Front-end/\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430/fullstack-1/front/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Page from \"./component/page\";\n// import PostList from \"./container/post-list\"\nimport Grid from \"./component/grid\";\nimport Box from \"./component/box\";\n\n// function App() {\n//   return (\n//     <Page>\n//       <PostList/>\n//     </Page>\n//   )\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const scrollPositionRef = useRef(0);\n  const handleScroll = () => {\n    scrollPositionRef.current = window.scrollY;\n  };\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  });\n  return /*#__PURE__*/_jsxDEV(Page, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n// function App() {\n//   const prevValueRef = useRef(null)\n\n//   const [value, setValue] = useState(0)\n\n//   useEffect (() => {\n//     prevValueRef.current = value\n\n//   }, [value])\n\n//   const handleIncrement = () => {\n//     setValue(value + 1)\n//   }\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <p>Value: {value}</p>\n//           <p>PrevValueRef: {prevValueRef.current}</p>\n//         </Box>\n//         <Box>\n//           <button onClick={handleIncrement}>Increment</button>\n//         </Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// function App() {\n//   const inputRef = useRef(null)\n//   useEffect (() => {\n//     if(inputRef && inputRef.current) inputRef.current.focus()\n//   }, [])\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <input ref={inputRef} placeholder=\"Введіть пошту...\"/>\n//         </Box>\n//         <Box>\n//           <input placeholder=\"Введіть пароль...\"/>\n//         </Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// function App() {\n//   const fistCatRef = useRef(null)\n//   const secondCatRef = useRef(null)\n//   const lastCatRef = useRef(null)\n\n//   function handleScrollBy(ref) {\n//     console.log(ref)\n//     if(ref && ref.current) {\n//       const offsetTop = ref.current.offsetTop\n//       window.scrollBy({\n//         top: offsetTop,\n//         behavior: \"smooth\"\n//       })\n//     }\n//   }\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <button onClick={() => handleScrollBy(fistCatRef)}>Cat 1</button>\n//         <button onClick={() => handleScrollBy(secondCatRef)}>Cat 2</button>\n//         <button onClick={() => handleScrollBy(lastCatRef)}>Cat 3</button>\n//       </Grid>\n//       <div>\n//         <ul style={{display: 'grid', gap: '500px', marginBottom: '500px'}}>\n//           <li>\n//             <img src=\"https://placecats.com/g/200/200\" alt=\"Cat 1\" ref={fistCatRef}/>\n//           </li>\n//           <li>\n//             <img src=\"https://placecats.com/g/200/200\" alt=\"Cat 2\" ref={secondCatRef}/>\n//           </li>\n//           <li>\n//             <img src=\"https://placecats.com/g/200/200\" alt=\"Cat 3\" ref={lastCatRef}/>\n//           </li>\n//         </ul>\n//       </div>\n//     </Page>\n//   )\n// }\n\n// import Grid from \"./component/grid\"\n// import Box from \"./component/box\"\n// import { useReducer } from \"react\";\n\n// const LIST_ACTION_TYPE = {\n//   ADD: \"add\",\n//   DELETE: \"delete\",\n//   SELECT: \"select\",\n//   REVERCE: \"reverse\"\n// }\n\n// function listReducer(state, action) {\n//   switch (action.type) {\n//     case LIST_ACTION_TYPE.ADD:\n//       const id =  new Date().getTime()\n//       const newItem = {value: action.payload, id}\n//       return {...state, items: [...state.items, newItem]}\n\n//     case LIST_ACTION_TYPE.DELETE:\n//       const newItems = state.items.filter((item) => item.id !== action.payload)\n//       return {...state, items: newItems}\n\n//     case LIST_ACTION_TYPE.SELECT:\n//       return {...state, selectedId: action.payload === state.selectedId ? null : action.payload}\n\n//     case LIST_ACTION_TYPE.REVERCE:\n//       return {...state, items: state.items.reverse()}\n\n//     default: return {...state}\n//   }\n// }\n\n// const initState = {items: []}\n\n// function App() {\n//   // за допомогою init  в useReducer можна передати початкові дані які будуть завжди додаватись\n//   const init = (state) => {\n//     if (state.items && state.items.length === 0) {\n//       return {...state, items: [{id: 1233432, value: 'Start post'}]}\n//     } else {\n//       return state\n//     }\n//   }\n\n//   console.log('render')\n//   const [state, dispatch] = useReducer(listReducer, initState, init)\n\n//   const handleAddItem = (e) => {\n//     const { value } = e.target\n//     if(!value) return\n//     dispatch({type: LIST_ACTION_TYPE.ADD, payload: value})\n//     e.target.value = \"\"\n//   }\n\n//   const handleRemoveItem = (id) => dispatch({type: LIST_ACTION_TYPE.DELETE, payload: id})\n\n//   const handleSelectItem = (id) => dispatch({type: LIST_ACTION_TYPE.SELECT, payload: id})\n\n//   const handleReverseItems = () => dispatch({type: LIST_ACTION_TYPE.REVERCE})\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <h1>Список елементів:</h1>\n//           <ul>\n//             <Grid>\n//               {state.items.map(({value, id}) => (\n//                 <li onClick={() => handleSelectItem(id)} key={id}>\n//                   <Box style={{borderColor: state.selectedId === id ? 'green' : '#e6e6e6'}}>\n//                     <span>{value}</span>\n//                     <button onClick={(e) => {e.stopPropagation(); handleRemoveItem(id);}}>Видалити</button>\n//                   </Box>\n//                 </li>\n//               ))}\n//             </Grid>\n//           </ul>\n//         </Box>\n//         <Box>\n//           <input onBlur={handleAddItem} type=\"text\" placeholder=\"Введіть новий елемент\"/>\n//         </Box>\n//         <Box><button onClick={handleReverseItems}>Змінити порядок</button></Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// import { useEffect, useState } from \"react\";\n\n// function App() {\n//   const [location, setLocation] = useState(null)\n\n//   useEffect(() => {\n//     if(\"geolocation\" in navigator){\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const {latitude, longitude} = position.coords;\n//           setLocation({latitude, longitude})\n//         }, \n//         (error) => {\n//           console.error(\"Помилка отримання геолокації:\", error.message)\n//         }\n//       )\n//     } else {\n//       console.error(\"Геолокація не підтримується в браузері.\")\n//     }\n//   }, [])\n\n//   return (\n//     <Page>\n//       {location ? (\n//         <div>\n//           <h1>Ваша геолокація</h1>\n//           <p>Широта: {location.latitude}</p>\n//           <p>Довгота: {location.longitude}</p>\n//         </div>\n//       ) : (\n//         <p>Отримання геолокації...</p>\n//       )}\n//     </Page>\n//   )\n// }\n_s(App, \"mwxbdptmp5g7oF0eEMBJseZGxUU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Page","Grid","Box","jsxDEV","_jsxDEV","App","_s","scrollPositionRef","handleScroll","current","window","scrollY","addEventListener","removeEventListener","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/roma/Documents/Навчання_JS/Front-End/Модуль 2. Практика Front-end/Практика/fullstack-1/front/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport Page from \"./component/page\"\n// import PostList from \"./container/post-list\"\nimport Grid from \"./component/grid\"\nimport Box from \"./component/box\"\n\n// function App() {\n//   return (\n//     <Page>\n//       <PostList/>\n//     </Page>\n//   )\n// }\n\nfunction App() {\n  const scrollPositionRef = useRef(0)\n\n  const handleScroll = () => {\n    scrollPositionRef.current = window.scrollY\n  }\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => window.removeEventListener(\"scroll\", handleScroll)\n  })\n\n  return (\n    <Page>\n    </Page>\n  )\n}\n\n// function App() {\n//   const prevValueRef = useRef(null)\n\n//   const [value, setValue] = useState(0)\n\n//   useEffect (() => {\n//     prevValueRef.current = value\n\n//   }, [value])\n\n//   const handleIncrement = () => {\n//     setValue(value + 1)\n//   }\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <p>Value: {value}</p>\n//           <p>PrevValueRef: {prevValueRef.current}</p>\n//         </Box>\n//         <Box>\n//           <button onClick={handleIncrement}>Increment</button>\n//         </Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// function App() {\n//   const inputRef = useRef(null)\n//   useEffect (() => {\n//     if(inputRef && inputRef.current) inputRef.current.focus()\n//   }, [])\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <input ref={inputRef} placeholder=\"Введіть пошту...\"/>\n//         </Box>\n//         <Box>\n//           <input placeholder=\"Введіть пароль...\"/>\n//         </Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// function App() {\n//   const fistCatRef = useRef(null)\n//   const secondCatRef = useRef(null)\n//   const lastCatRef = useRef(null)\n\n//   function handleScrollBy(ref) {\n//     console.log(ref)\n//     if(ref && ref.current) {\n//       const offsetTop = ref.current.offsetTop\n//       window.scrollBy({\n//         top: offsetTop,\n//         behavior: \"smooth\"\n//       })\n//     }\n//   }\n  \n//   return (\n//     <Page>\n//       <Grid>\n//         <button onClick={() => handleScrollBy(fistCatRef)}>Cat 1</button>\n//         <button onClick={() => handleScrollBy(secondCatRef)}>Cat 2</button>\n//         <button onClick={() => handleScrollBy(lastCatRef)}>Cat 3</button>\n//       </Grid>\n//       <div>\n//         <ul style={{display: 'grid', gap: '500px', marginBottom: '500px'}}>\n//           <li>\n//             <img src=\"https://placecats.com/g/200/200\" alt=\"Cat 1\" ref={fistCatRef}/>\n//           </li>\n//           <li>\n//             <img src=\"https://placecats.com/g/200/200\" alt=\"Cat 2\" ref={secondCatRef}/>\n//           </li>\n//           <li>\n//             <img src=\"https://placecats.com/g/200/200\" alt=\"Cat 3\" ref={lastCatRef}/>\n//           </li>\n//         </ul>\n//       </div>\n//     </Page>\n//   )\n// }\n\n// import Grid from \"./component/grid\"\n// import Box from \"./component/box\"\n// import { useReducer } from \"react\";\n\n// const LIST_ACTION_TYPE = {\n//   ADD: \"add\",\n//   DELETE: \"delete\",\n//   SELECT: \"select\",\n//   REVERCE: \"reverse\"\n// }\n\n// function listReducer(state, action) {\n//   switch (action.type) {\n//     case LIST_ACTION_TYPE.ADD:\n//       const id =  new Date().getTime()\n//       const newItem = {value: action.payload, id}\n//       return {...state, items: [...state.items, newItem]}\n    \n//     case LIST_ACTION_TYPE.DELETE:\n//       const newItems = state.items.filter((item) => item.id !== action.payload)\n//       return {...state, items: newItems}\n    \n//     case LIST_ACTION_TYPE.SELECT:\n//       return {...state, selectedId: action.payload === state.selectedId ? null : action.payload}\n      \n//     case LIST_ACTION_TYPE.REVERCE:\n//       return {...state, items: state.items.reverse()}\n\n//     default: return {...state}\n//   }\n// }\n\n// const initState = {items: []}\n\n// function App() {\n//   // за допомогою init  в useReducer можна передати початкові дані які будуть завжди додаватись\n//   const init = (state) => {\n//     if (state.items && state.items.length === 0) {\n//       return {...state, items: [{id: 1233432, value: 'Start post'}]}\n//     } else {\n//       return state\n//     }\n//   }\n\n//   console.log('render')\n//   const [state, dispatch] = useReducer(listReducer, initState, init)\n\n//   const handleAddItem = (e) => {\n//     const { value } = e.target\n//     if(!value) return\n//     dispatch({type: LIST_ACTION_TYPE.ADD, payload: value})\n//     e.target.value = \"\"\n//   }\n\n//   const handleRemoveItem = (id) => dispatch({type: LIST_ACTION_TYPE.DELETE, payload: id})\n\n//   const handleSelectItem = (id) => dispatch({type: LIST_ACTION_TYPE.SELECT, payload: id})\n\n//   const handleReverseItems = () => dispatch({type: LIST_ACTION_TYPE.REVERCE})\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <h1>Список елементів:</h1>\n//           <ul>\n//             <Grid>\n//               {state.items.map(({value, id}) => (\n//                 <li onClick={() => handleSelectItem(id)} key={id}>\n//                   <Box style={{borderColor: state.selectedId === id ? 'green' : '#e6e6e6'}}>\n//                     <span>{value}</span>\n//                     <button onClick={(e) => {e.stopPropagation(); handleRemoveItem(id);}}>Видалити</button>\n//                   </Box>\n//                 </li>\n//               ))}\n//             </Grid>\n//           </ul>\n//         </Box>\n//         <Box>\n//           <input onBlur={handleAddItem} type=\"text\" placeholder=\"Введіть новий елемент\"/>\n//         </Box>\n//         <Box><button onClick={handleReverseItems}>Змінити порядок</button></Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// import { useEffect, useState } from \"react\";\n\n// function App() {\n//   const [location, setLocation] = useState(null)\n\n//   useEffect(() => {\n//     if(\"geolocation\" in navigator){\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const {latitude, longitude} = position.coords;\n//           setLocation({latitude, longitude})\n//         }, \n//         (error) => {\n//           console.error(\"Помилка отримання геолокації:\", error.message)\n//         }\n//       )\n//     } else {\n//       console.error(\"Геолокація не підтримується в браузері.\")\n//     }\n//   }, [])\n\n\n//   return (\n//     <Page>\n//       {location ? (\n//         <div>\n//           <h1>Ваша геолокація</h1>\n//           <p>Широта: {location.latitude}</p>\n//           <p>Довгота: {location.longitude}</p>\n//         </div>\n//       ) : (\n//         <p>Отримання геолокації...</p>\n//       )}\n//     </Page>\n//   )\n// }\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,IAAI,MAAM,kBAAkB;AACnC;AACA,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,GAAG,MAAM,iBAAiB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,iBAAiB,GAAGV,MAAM,CAAC,CAAC,CAAC;EAEnC,MAAMW,YAAY,GAAGA,CAAA,KAAM;IACzBD,iBAAiB,CAACE,OAAO,GAAGC,MAAM,CAACC,OAAO;EAC5C,CAAC;EACDb,SAAS,CAAC,MAAM;IACdY,MAAM,CAACE,gBAAgB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IAC/C,OAAO,MAAME,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;EACjE,CAAC,CAAC;EAEF,oBACEJ,OAAA,CAACJ,IAAI;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEX;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAX,EAAA,CAnOSD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAqOZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}