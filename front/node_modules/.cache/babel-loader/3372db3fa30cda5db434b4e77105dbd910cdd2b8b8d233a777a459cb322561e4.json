{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport Page from \"./component/page\";\nimport PostList from \"./container/post-list\";\n\n// function App() {\n//   return (\n//     <Page>\n//       <PostList/>\n//     </Page>\n//   )\n// }\n\nfunction App() {\n  _s();\n  const fistCatRef = useRef(null);\n  const secondCatRef = useRef(null);\n  const lastCatRef = useRef(null);\n  return 'test';\n}\n\n// import Grid from \"./component/grid\"\n// import Box from \"./component/box\"\n// import { useReducer } from \"react\";\n\n// const LIST_ACTION_TYPE = {\n//   ADD: \"add\",\n//   DELETE: \"delete\",\n//   SELECT: \"select\",\n//   REVERCE: \"reverse\"\n// }\n\n// function listReducer(state, action) {\n//   switch (action.type) {\n//     case LIST_ACTION_TYPE.ADD:\n//       const id =  new Date().getTime()\n//       const newItem = {value: action.payload, id}\n//       return {...state, items: [...state.items, newItem]}\n\n//     case LIST_ACTION_TYPE.DELETE:\n//       const newItems = state.items.filter((item) => item.id !== action.payload)\n//       return {...state, items: newItems}\n\n//     case LIST_ACTION_TYPE.SELECT:\n//       return {...state, selectedId: action.payload === state.selectedId ? null : action.payload}\n\n//     case LIST_ACTION_TYPE.REVERCE:\n//       return {...state, items: state.items.reverse()}\n\n//     default: return {...state}\n//   }\n// }\n\n// const initState = {items: []}\n\n// function App() {\n//   // за допомогою init  в useReducer можна передати початкові дані які будуть завжди додаватись\n//   const init = (state) => {\n//     if (state.items && state.items.length === 0) {\n//       return {...state, items: [{id: 1233432, value: 'Start post'}]}\n//     } else {\n//       return state\n//     }\n//   }\n\n//   console.log('render')\n//   const [state, dispatch] = useReducer(listReducer, initState, init)\n\n//   const handleAddItem = (e) => {\n//     const { value } = e.target\n//     if(!value) return\n//     dispatch({type: LIST_ACTION_TYPE.ADD, payload: value})\n//     e.target.value = \"\"\n//   }\n\n//   const handleRemoveItem = (id) => dispatch({type: LIST_ACTION_TYPE.DELETE, payload: id})\n\n//   const handleSelectItem = (id) => dispatch({type: LIST_ACTION_TYPE.SELECT, payload: id})\n\n//   const handleReverseItems = () => dispatch({type: LIST_ACTION_TYPE.REVERCE})\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <h1>Список елементів:</h1>\n//           <ul>\n//             <Grid>\n//               {state.items.map(({value, id}) => (\n//                 <li onClick={() => handleSelectItem(id)} key={id}>\n//                   <Box style={{borderColor: state.selectedId === id ? 'green' : '#e6e6e6'}}>\n//                     <span>{value}</span>\n//                     <button onClick={(e) => {e.stopPropagation(); handleRemoveItem(id);}}>Видалити</button>\n//                   </Box>\n//                 </li>\n//               ))}\n//             </Grid>\n//           </ul>\n//         </Box>\n//         <Box>\n//           <input onBlur={handleAddItem} type=\"text\" placeholder=\"Введіть новий елемент\"/>\n//         </Box>\n//         <Box><button onClick={handleReverseItems}>Змінити порядок</button></Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// import { useEffect, useState } from \"react\";\n\n// function App() {\n//   const [location, setLocation] = useState(null)\n\n//   useEffect(() => {\n//     if(\"geolocation\" in navigator){\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const {latitude, longitude} = position.coords;\n//           setLocation({latitude, longitude})\n//         }, \n//         (error) => {\n//           console.error(\"Помилка отримання геолокації:\", error.message)\n//         }\n//       )\n//     } else {\n//       console.error(\"Геолокація не підтримується в браузері.\")\n//     }\n//   }, [])\n\n//   return (\n//     <Page>\n//       {location ? (\n//         <div>\n//           <h1>Ваша геолокація</h1>\n//           <p>Широта: {location.latitude}</p>\n//           <p>Довгота: {location.longitude}</p>\n//         </div>\n//       ) : (\n//         <p>Отримання геолокації...</p>\n//       )}\n//     </Page>\n//   )\n// }\n_s(App, \"UZNuZDL2Xyg6Q0ivC7J/QWYzJOs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","Page","PostList","App","_s","fistCatRef","secondCatRef","lastCatRef","_c","$RefreshReg$"],"sources":["/Users/roma/Documents/Навчання_JS/Front-End/Модуль 2. Практика Front-end/Практика/fullstack-1/front/src/App.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport Page from \"./component/page\"\nimport PostList from \"./container/post-list\"\n\n// function App() {\n//   return (\n//     <Page>\n//       <PostList/>\n//     </Page>\n//   )\n// }\n\nfunction App() {\n  const fistCatRef = useRef(null)\n  const secondCatRef = useRef(null)\n  const lastCatRef = useRef(null)\n\n\n  return (\n    'test'\n  )\n}\n\n// import Grid from \"./component/grid\"\n// import Box from \"./component/box\"\n// import { useReducer } from \"react\";\n\n// const LIST_ACTION_TYPE = {\n//   ADD: \"add\",\n//   DELETE: \"delete\",\n//   SELECT: \"select\",\n//   REVERCE: \"reverse\"\n// }\n\n// function listReducer(state, action) {\n//   switch (action.type) {\n//     case LIST_ACTION_TYPE.ADD:\n//       const id =  new Date().getTime()\n//       const newItem = {value: action.payload, id}\n//       return {...state, items: [...state.items, newItem]}\n    \n//     case LIST_ACTION_TYPE.DELETE:\n//       const newItems = state.items.filter((item) => item.id !== action.payload)\n//       return {...state, items: newItems}\n    \n//     case LIST_ACTION_TYPE.SELECT:\n//       return {...state, selectedId: action.payload === state.selectedId ? null : action.payload}\n      \n//     case LIST_ACTION_TYPE.REVERCE:\n//       return {...state, items: state.items.reverse()}\n\n//     default: return {...state}\n//   }\n// }\n\n// const initState = {items: []}\n\n// function App() {\n//   // за допомогою init  в useReducer можна передати початкові дані які будуть завжди додаватись\n//   const init = (state) => {\n//     if (state.items && state.items.length === 0) {\n//       return {...state, items: [{id: 1233432, value: 'Start post'}]}\n//     } else {\n//       return state\n//     }\n//   }\n\n//   console.log('render')\n//   const [state, dispatch] = useReducer(listReducer, initState, init)\n\n//   const handleAddItem = (e) => {\n//     const { value } = e.target\n//     if(!value) return\n//     dispatch({type: LIST_ACTION_TYPE.ADD, payload: value})\n//     e.target.value = \"\"\n//   }\n\n//   const handleRemoveItem = (id) => dispatch({type: LIST_ACTION_TYPE.DELETE, payload: id})\n\n//   const handleSelectItem = (id) => dispatch({type: LIST_ACTION_TYPE.SELECT, payload: id})\n\n//   const handleReverseItems = () => dispatch({type: LIST_ACTION_TYPE.REVERCE})\n\n//   return (\n//     <Page>\n//       <Grid>\n//         <Box>\n//           <h1>Список елементів:</h1>\n//           <ul>\n//             <Grid>\n//               {state.items.map(({value, id}) => (\n//                 <li onClick={() => handleSelectItem(id)} key={id}>\n//                   <Box style={{borderColor: state.selectedId === id ? 'green' : '#e6e6e6'}}>\n//                     <span>{value}</span>\n//                     <button onClick={(e) => {e.stopPropagation(); handleRemoveItem(id);}}>Видалити</button>\n//                   </Box>\n//                 </li>\n//               ))}\n//             </Grid>\n//           </ul>\n//         </Box>\n//         <Box>\n//           <input onBlur={handleAddItem} type=\"text\" placeholder=\"Введіть новий елемент\"/>\n//         </Box>\n//         <Box><button onClick={handleReverseItems}>Змінити порядок</button></Box>\n//       </Grid>\n//     </Page>\n//   )\n// }\n\n// import { useEffect, useState } from \"react\";\n\n// function App() {\n//   const [location, setLocation] = useState(null)\n\n//   useEffect(() => {\n//     if(\"geolocation\" in navigator){\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const {latitude, longitude} = position.coords;\n//           setLocation({latitude, longitude})\n//         }, \n//         (error) => {\n//           console.error(\"Помилка отримання геолокації:\", error.message)\n//         }\n//       )\n//     } else {\n//       console.error(\"Геолокація не підтримується в браузері.\")\n//     }\n//   }, [])\n\n\n//   return (\n//     <Page>\n//       {location ? (\n//         <div>\n//           <h1>Ваша геолокація</h1>\n//           <p>Широта: {location.latitude}</p>\n//           <p>Довгота: {location.longitude}</p>\n//         </div>\n//       ) : (\n//         <p>Отримання геолокації...</p>\n//       )}\n//     </Page>\n//   )\n// }\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,QAAQ,MAAM,uBAAuB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,UAAU,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMM,YAAY,GAAGN,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMO,UAAU,GAAGP,MAAM,CAAC,IAAI,CAAC;EAG/B,OACE,MAAM;AAEV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAI,EAAA,CArISD,GAAG;AAAAK,EAAA,GAAHL,GAAG;AAuIZ,eAAeA,GAAG;AAAC,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}